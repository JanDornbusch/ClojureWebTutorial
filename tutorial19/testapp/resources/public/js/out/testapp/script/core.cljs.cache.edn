;; Analyzed by ClojureScript 1.8.51
{:name testapp.script.core, :doc nil, :excludes #{}, :use-macros {html hiccups.core}, :require-macros {hiccups hiccups.core, hiccups.core hiccups.core}, :uses nil, :requires {events goog.events, goog.events goog.events, dom goog.dom, goog.dom goog.dom}, :imports nil, :defs {set-html! {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 6, :column 7, :end-line 6, :end-column 16, :arglists (quote ([el content]))}, :name testapp.script.core/set-html!, :variadic false, :file "scripts\\core.cljs", :end-column 16, :method-params ([el content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el content]))}, socket {:name testapp.script.core/socket, :file "scripts\\core.cljs", :line 11, :column 1, :end-line 11, :end-column 16, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 11, :column 10, :end-line 11, :end-column 16}}, receive-msg! {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 13, :column 7, :end-line 13, :end-column 19, :arglists (quote ([handler])), :doc "receive messages of socket and apply them to handler"}, :name testapp.script.core/receive-msg!, :variadic false, :file "scripts\\core.cljs", :end-column 19, :method-params ([handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([handler])), :doc "receive messages of socket and apply them to handler"}, send-msg! {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([msg])), :doc "sends a message over socket"}, :name testapp.script.core/send-msg!, :variadic false, :file "scripts\\core.cljs", :end-column 16, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "sends a message over socket"}, createWebSocket {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 28, :column 7, :end-line 28, :end-column 22, :arglists (quote ([url handler])), :doc "creates a new socket with the given url and the handler to handle all incomming messages"}, :name testapp.script.core/createWebSocket, :variadic false, :file "scripts\\core.cljs", :end-column 22, :method-params ([url handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url handler])), :doc "creates a new socket with the given url and the handler to handle all incomming messages"}, closeSocket {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([])), :doc "closes the Socket"}, :name testapp.script.core/closeSocket, :variadic false, :file "scripts\\core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "closes the Socket"}, parser {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 51, :column 7, :end-line 51, :end-column 13, :arglists (quote ([response])), :doc "attaches the response to the html element with id response"}, :name testapp.script.core/parser, :variadic false, :file "scripts\\core.cljs", :end-column 13, :method-params ([response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([response])), :doc "attaches the response to the html element with id response"}, main {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 58, :column 7, :end-line 58, :end-column 11, :arglists (quote ([]))}, :name testapp.script.core/main, :variadic false, :file "scripts\\core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, socketbinding {:protocol-inline nil, :meta {:file "D:\\OneDrive\\Dokumente\\ClojureWebTutorial\\tutorial19\\testapp\\scripts\\core.cljs", :line 70, :column 7, :end-line 70, :end-column 20, :arglists (quote ([])), :doc "create the sockets and bind the function to the button with id button_socket"}, :name testapp.script.core/socketbinding, :variadic false, :file "scripts\\core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "create the sockets and bind the function to the button with id button_socket"}}}